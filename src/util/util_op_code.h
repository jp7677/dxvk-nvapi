#pragma once

#include "../nvapi_private.h"
#include "nvShaderExtnEnums.h"
#include "util_string.h"

namespace dxvk {
    inline std::string fromCode(const uint32_t code) {
        static const std::map<uint32_t, std::string> codes{
            MAP_ENUM_VALUE(NV_EXTN_OP_SHFL),
            MAP_ENUM_VALUE(NV_EXTN_OP_SHFL_UP),
            MAP_ENUM_VALUE(NV_EXTN_OP_SHFL_DOWN),
            MAP_ENUM_VALUE(NV_EXTN_OP_SHFL_XOR),
            MAP_ENUM_VALUE(NV_EXTN_OP_VOTE_ALL),
            MAP_ENUM_VALUE(NV_EXTN_OP_VOTE_ANY),
            MAP_ENUM_VALUE(NV_EXTN_OP_VOTE_BALLOT),
            MAP_ENUM_VALUE(NV_EXTN_OP_GET_LANE_ID),
            MAP_ENUM_VALUE(NV_EXTN_OP_FP16_ATOMIC),
            MAP_ENUM_VALUE(NV_EXTN_OP_FP32_ATOMIC),
            MAP_ENUM_VALUE(NV_EXTN_OP_GET_SPECIAL),
            MAP_ENUM_VALUE(NV_EXTN_OP_UINT64_ATOMIC),
            MAP_ENUM_VALUE(NV_EXTN_OP_MATCH_ANY),
            MAP_ENUM_VALUE(NV_EXTN_OP_FOOTPRINT),
            MAP_ENUM_VALUE(NV_EXTN_OP_FOOTPRINT_BIAS),
            MAP_ENUM_VALUE(NV_EXTN_OP_GET_SHADING_RATE),
            MAP_ENUM_VALUE(NV_EXTN_OP_FOOTPRINT_LEVEL),
            MAP_ENUM_VALUE(NV_EXTN_OP_FOOTPRINT_GRAD),
            MAP_ENUM_VALUE(NV_EXTN_OP_SHFL_GENERIC),
            MAP_ENUM_VALUE(NV_EXTN_OP_VPRS_EVAL_ATTRIB_AT_SAMPLE),
            MAP_ENUM_VALUE(NV_EXTN_OP_VPRS_EVAL_ATTRIB_SNAPPED),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_TRACE_RAY),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_MAKE_HIT),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_MAKE_HIT_WITH_RECORD_INDEX),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_MAKE_MISS),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_REORDER_THREAD),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_INVOKE),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_IS_MISS),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_GET_INSTANCE_ID),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_GET_INSTANCE_INDEX),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_GET_PRIMITIVE_INDEX),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_GET_GEOMETRY_INDEX),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_GET_HIT_KIND),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_GET_RAY_DESC),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_GET_ATTRIBUTES),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_GET_SHADER_TABLE_INDEX),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_LOAD_LOCAL_ROOT_TABLE_CONSTANT),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_IS_HIT),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_IS_NOP),
            MAP_ENUM_VALUE(NV_EXTN_OP_HIT_OBJECT_MAKE_NOP),
            MAP_ENUM_VALUE(NV_EXTN_OP_RT_TRIANGLE_OBJECT_POSITIONS),
            MAP_ENUM_VALUE(NV_EXTN_OP_RT_MICRO_TRIANGLE_OBJECT_POSITIONS),
            MAP_ENUM_VALUE(NV_EXTN_OP_RT_MICRO_TRIANGLE_BARYCENTRICS),
            MAP_ENUM_VALUE(NV_EXTN_OP_RT_IS_MICRO_TRIANGLE_HIT),
            MAP_ENUM_VALUE(NV_EXTN_OP_RT_IS_BACK_FACING),
            MAP_ENUM_VALUE(NV_EXTN_OP_RT_MICRO_VERTEX_OBJECT_POSITION),
            MAP_ENUM_VALUE(NV_EXTN_OP_RT_MICRO_VERTEX_BARYCENTRICS),
        };

        auto it = codes.find(code);
        return it != codes.end() ? it->second : str::format("UNKNOWN_EXTN_OP/", code);
    }
}
